#!/bin/bash
# vim: fdm=marker
# copyright 2012 吴兴博(Wu Xingbo) <wuxb45@gmail.com>
# this is a script for building cross-tools.

# set files, CHANGE your URL/PKG here {{{

# if you have download the packages, just put it around me.
binutils="binutils-2.22"
binutils_mirror=http://mirror.bjtu.edu.cn/gnu/binutils

gcc="gcc-4.6.2"
gcc_mirror=http://mirror.bjtu.edu.cn/gnu/gcc

libc="newlib-1.20.0"
libc_mirror=ftp://sources.redhat.com/pub/newlib

gdb="gdb-7.3.1"
gdb_mirror=http://mirror.bjtu.edu.cn/gnu/gdb

# }}}

# helper functions {{{
function exit_on_fail ()
{
  if [ "$1" -ne 0 ]; then
    echo "exit with failure $1"
    exit $1
  fi
}

function print_usage ()
{
  echo "usage:"
  echo "       $0 <target> <prefix>"
}

# }}}

# check args and prepare {{{
if [ $# != 2 ]; then
  print_usage
  exit 0
fi

# target: mmix mipsel powerpc ... see gcc manual
target=$1
prefix=$2
cores=$(cat /proc/cpuinfo | grep 'model name' | wc -l)
pjobs=$(($cores + 2))

dir0=$(pwd)
export TARGET=$target
export PREFIX=$prefix
mkdir -p $PREFIX
export PATH=$PREFIX/bin:$PATH

# }}}


# glue some useful parameters {{{

binutils_pkg="$binutils".tar.bz2
binutils_bdir="$binutils"-build
binutils_url="$binutils_mirror"/"$binutils_pkg"

gcc_pkg="$gcc".tar.bz2
gcc_bdir="$gcc"-build
gcc_url="$gcc_mirror"/"$gcc"/"$gcc_pkg"

libc_pkg="$libc".tar.gz
libc_bdir="$libc"-build
libc_url="$libc_mirror"/"$libc_pkg"

gdb_pkg="$gdb".tar.bz2
gdb_bdir="$gdb"-build
gdb_url="$gdb_mirror"/"$gdb_pkg"

# do some clean-up
#rm -rf "$binutils" "$binutils_bdir"
#rm -rf "$gcc" "$gcc_bdir"
#rm -rf "$libc" "$libc_bdir"
#rm -rf "$gdb" "$gdb_bdir"

# }}}

# check for packages {{{
function prepare_package ()
{
  pkgname=$1
  pkg=$2
  url=$3
  echo "checking for $pkgname"
  if [ -f $pkg ]; then
    echo "Found $pkgname : $pkg"
    return 0
  elif [ $url ]; then
    echo "Get $pkgname from $url"
    wget -O $pkg $url
    dlresult=$?
    if [ "$dlresult" -ne 0 ]; then
      rm -f $pkg
    fi
    return $dlresult
  else
    echo "No url or package for [[$pkgname]], abort."
    return 1
  fi
}


prepare_package 'binutils' "$binutils_pkg" "$binutils_url"
exit_on_fail $?
prepare_package 'gcc' "$gcc_pkg" "$gcc_url"
exit_on_fail $?
prepare_package 'newlib' "$libc_pkg" "$libc_url"
exit_on_fail $?
prepare_package 'gdb' "$gdb_pkg" "$gdb_url"
exit_on_fail $?

# }}}

# extract files {{{

function extract_pkg ()
{
  pkgname=$1
  pkgdir=$pkgname
  pkg=$2
  if [ -d $pkgdir ]; then
    echo "not extract $pkgname"
    return 0
  else
    echo "Extracting $pkgname"
    tar -xf $pkg
    return $?
  fi
}

extract_pkg "$binutils" "$binutils_pkg"
exit_on_fail $?
extract_pkg "$gcc" "$gcc_pkg"
exit_on_fail $?
extract_pkg "$libc" "$libc_pkg"
exit_on_fail $?
extract_pkg "$gdb" "$gdb_pkg"
exit_on_fail $?

# }}}

# build binutils {{{

tar -xf $binutils_pkg
exit_on_fail $?
mkdir $binutils_bdir
cd $binutils_bdir
../$binutils/configure --target=$TARGET --prefix=$PREFIX
exit_on_fail $?
make all -j"$pjobs"
exit_on_fail $?
make install
exit_on_fail $?
cd $dir0

# }}}

# build gcc stage 1 {{{

tar -xf $gcc_pkg
exit_on_fail $?
mkdir $gcc_bdir
cd $gcc_bdir
../$gcc/configure --target=$TARGET --prefix=$PREFIX --without-headers --with-newlib  --with-gnu-as --with-gnu-ld
exit_on_fail $?
make all-gcc -j"$pjobs"
exit_on_fail $?
make install-gcc
exit_on_fail $?
cd $dir0

# }}}

# build newlib {{{

tar -xf $libc_pkg
exit_on_fail $?
mkdir $libc_bdir
cd $libc_bdir
../$libc/configure --target=$TARGET --prefix=$PREFIX
exit_on_fail $?
make all -j"$pjobs"
exit_on_fail $?
make install
exit_on_fail $?
cd $dir0

# }}}

# build gcc stage 2 {{{

cd $gcc_bdir
../$gcc/configure --target=$TARGET --prefix=$PREFIX --with-newlib --with-gnu-as --with-gnu-ld --disable-shared --disable-libssp
exit_on_fail $?
make all -j"$pjobs"
exit_on_fail $?
make install
exit_on_fail $?
cd $dir0

# }}}

# build gdb {{{

tar -xf "$gdb_pkg" 
exit_on_fail $?
mkdir "$gdb_bdir"
cd "$gdb_bdir"
../$gdb/configure --target=$TARGET --prefix=$PREFIX
exit_on_fail $?
make all -j"$pjobs"
exit_on_fail $?
make install
exit_on_fail $?
cd $dir0

# }}}

echo "ALL DONE! Cons!"
